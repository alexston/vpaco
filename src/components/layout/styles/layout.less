@css-prefix: vp-;
@grid-columns: 24;
@grid-gutter-width: 0;
@screen-xs: 480px;
@screen-xs-min: @screen-xs;
@screen-xs-max: (@screen-xs-min - 1);

// Small screen / tablet
@screen-sm: 768px;
@screen-sm-min: @screen-sm;
@screen-sm-max: (@screen-sm-min - 1);

// Medium screen / desktop
@screen-md: 992px;
@screen-md-min: @screen-md;
@screen-md-max: (@screen-md-min - 1);

// Large screen / wide desktop
@screen-lg: 1200px;
@screen-lg-min: @screen-lg;
@screen-lg-max: (@screen-lg-min - 1);

@row-prefix-cls: ~'@{css-prefix}row';
@col-prefix-cls: ~'@{css-prefix}col';

.clearfix() {
    zoom: 1;
    &:before,
    &:after {
        content: '';
        display: table;
    }
    &:after {
        clear: both;
        visibility: hidden;
        font-size: 0;
        height: 0;
    }
}

.make-row(@gutter: @grid-gutter-width) {
    position: relative;
    margin-left: (@gutter / -2);
    margin-right: (@gutter / -2);
    height: auto;
    .clearfix;
}

.float-grid-columns(@class) {
    .col(@index) {
        // initial
        @item: ~'.@{col-prefix-cls}-span@{class}-@{index}';
        .col((@index + 1), @item);
    }
    .col(@index, @list) when (@index =< @grid-columns) {
        // general
        @item: ~'.@{col-prefix-cls}-span@{class}-@{index}';
        .col((@index + 1), ~'@{list}, @{item}');
    }
    .col(@index, @list) when (@index > @grid-columns) {
        // terminal
        @{list} {
            float: left;
            flex: 0 0 auto;
        }
    }
    .col(1); // kickstart it
}

.loop-grid-columns(@index, @class) when (@index > 0) {
    .@{col-prefix-cls}-span@{class}-@{index} {
        display: block;
        width: percentage((@index / @grid-columns));
    }
    .@{col-prefix-cls}@{class}-push-@{index} {
        left: percentage((@index / @grid-columns));
    }
    .@{col-prefix-cls}@{class}-pull-@{index} {
        right: percentage((@index / @grid-columns));
    }
    .@{col-prefix-cls}@{class}-offset-@{index} {
        margin-left: percentage((@index / @grid-columns));
    }
    .@{col-prefix-cls}@{class}-order-@{index} {
        order: @index;
    }
    .loop-grid-columns((@index - 1), @class);
}

.loop-grid-columns(@index, @class) when (@index = 0) {
    .@{col-prefix-cls}-span@{class}-@{index} {
        display: none;
    }
    .@{col-prefix-cls}@{class}-push-@{index} {
        left: auto;
    }
    .@{col-prefix-cls}@{class}-pull-@{index} {
        right: auto;
    }
}

.make-grid(@class: ~'') {
    .float-grid-columns(@class);
    .loop-grid-columns(@grid-columns, @class);
}

.@{row-prefix-cls} {
    .make-row();
    display: block;

    &-flex {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;

        &:before,
        &:after {
            display: flex;
        }

        // x轴原点
        &-start {
            justify-content: flex-start;
        }

        // x轴居中
        &-center {
            justify-content: center;
        }

        // x轴反方向
        &-end {
            justify-content: flex-end;
        }

        // x轴平分
        &-space-between {
            justify-content: space-between;
        }

        // x轴有间隔地平分
        &-space-around {
            justify-content: space-around;
        }

        // 顶部对齐
        &-top {
            align-items: flex-start;
        }

        // 居中对齐
        &-middle {
            align-items: center;
        }

        // 底部对齐
        &-bottom {
            align-items: flex-end;
        }
    }
}

.@{col-prefix-cls} {
    position: relative;
    display: block;
}

.make-grid();

// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

.make-grid(-xs);

// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width: @screen-sm-min) {
    .make-grid(-sm);
}

// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: @screen-md-min) {
    .make-grid(-md);
}

// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: @screen-lg-min) {
    .make-grid(-lg);
}
